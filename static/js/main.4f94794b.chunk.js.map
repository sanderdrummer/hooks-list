{"version":3,"sources":["article/article-state.ts","article/article-form.tsx","article/article-list.tsx","App.js","serviceWorker.js","index.tsx"],"names":["useLocalStorage","key","initialValue","_useState","useState","window","localStorage","getItem","JSON","parse","error","_useState2","Object","slicedToArray","item","setInnerValue","value","setItem","stringify","ArticleForm","props","_useArticleStore","_useLocalStorage3","_useLocalStorage4","articleMap","updateMap","articles","keys","map","sort","a","b","popularity","updateArticles","name","article","nextArticle","id","objectSpread","defineProperty","useArticleStore","react","index_es","placeholder","clearOnSelect","onSelect","selection","items","ArticleList","_useArticleEntries","_useLocalStorage","_useLocalStorage2","updateEntries","entry","entries","inBasket","updateAmount","amount","toggleEntry","clear","useArticleEntries","toBasket","filter","padding","alignContent","justifyContent","onChange","e","target","onClick","length","margin","article_form_ArticleForm","App","themes","light","dark","styles","css","_templateObject","article_list_ArticleList","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","react_default","createElement","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f94794b.chunk.js","sourcesContent":["import { ArticleMap } from \"./article-state\";\nimport { useState } from \"react\";\n\nexport interface Article {\n  id: string;\n  name: string;\n  popularity: number;\n}\n\nexport interface ArticleMap {\n  [key: string]: Article;\n}\n\nexport interface ArticleEntry {\n  name: string;\n  amount?: string;\n  inBasket?: boolean;\n}\n\nexport interface ArticleEntryMap {\n  [key: string]: ArticleEntry;\n}\n\nexport function useArticleEntries() {\n  const [map, updateMap] = useLocalStorage<ArticleEntryMap>(\n    \"articleEntries\",\n    {}\n  );\n\n  const updateEntries = (entry: ArticleEntry) => {\n    updateMap({ ...map, [entry.name]: { ...entry } });\n  };\n\n  const clear = () => {\n    updateMap({});\n  };\n\n  const toggleEntry = (entry: ArticleEntry) => {\n    updateEntries({\n      ...entry,\n      inBasket: !entry.inBasket\n    });\n  };\n\n  const updateAmount = (entry: ArticleEntry, amount: string) => {\n    updateEntries({\n      ...entry,\n      amount\n    });\n  };\n\n  const entries = Object.keys(map)\n    .map(key => map[key])\n    .sort((a, b) => (a.inBasket === b.inBasket ? 0 : a.inBasket ? 1 : -1));\n\n  return { updateEntries, updateAmount, toggleEntry, entries, clear };\n}\n\nexport function useArticleStore() {\n  const [articleMap, updateMap] = useLocalStorage<ArticleMap>(\"articles\", {});\n\n  const updateArticles = (name: string) => {\n    const article = articleMap[name];\n    const nextArticle = article\n      ? { name: article.name, popularity: article.popularity + 1, id: name }\n      : { name, popularity: 0, id: name };\n\n    updateMap({ ...articleMap, [name]: nextArticle });\n  };\n\n  const articles = Object.keys(articleMap)\n    .map(key => articleMap[key])\n    .sort((a, b) => b.popularity - a.popularity);\n\n  return { articles, updateArticles };\n}\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (map: T) => void] {\n  const [item, setInnerValue] = useState(() => {\n    try {\n      return window.localStorage.getItem(key)\n        ? JSON.parse(window.localStorage.getItem(key) || \"\")\n        : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: any) => {\n    setInnerValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [item, setValue];\n}\n","import * as React from \"react\";\nimport { AutoComplete } from \"bricks-of-sand\";\n\nimport { useArticleStore } from \"./article-state\";\n\nexport const ArticleForm = (props: { onSelect: (article: string) => void }) => {\n  const { articles, updateArticles } = useArticleStore();\n\n  return (\n    <AutoComplete\n      placeholder=\"search\"\n      clearOnSelect\n      onSelect={selection => {\n        if (!selection) return;\n        updateArticles(selection.name);\n        props.onSelect(selection.name);\n      }}\n      items={articles}\n    />\n  );\n};\n","import * as React from \"react\";\n\nimport { useArticleEntries } from \"./article-state\";\nimport { ArticleForm } from \"./article-form\";\nimport { Flex, Input, Separator, Block, PrimaryButton } from \"bricks-of-sand\";\n\nexport const ArticleList = () => {\n  const {\n    entries,\n    updateEntries,\n    updateAmount,\n    toggleEntry,\n    clear\n  } = useArticleEntries();\n\n  const toBasket = entries.filter(entry => !entry.inBasket);\n  const inBasket = entries.filter(entry => entry.inBasket);\n\n  return (\n    <div>\n      {toBasket.map(entry => (\n        <Flex\n          padding=\"0.5rem 1rem\"\n          key={entry.name}\n          alignContent=\"center\"\n          justifyContent=\"space-between\"\n        >\n          <div>\n            <Input\n              value={entry.amount}\n              onChange={e => updateAmount(entry, e.target.value)}\n            />\n          </div>\n          <div onClick={() => toggleEntry(entry)}>{entry.name}</div>\n        </Flex>\n      ))}\n      {toBasket.length !== 0 && <Separator margin=\"0.5rem\" />}\n      {inBasket.map(entry => (\n        <Flex\n          padding=\"0.5rem 1rem\"\n          key={entry.name}\n          onClick={() => toggleEntry(entry)}\n          justifyContent=\"space-between\"\n        >\n          <div>{entry.amount}</div>\n          <div>{entry.name}</div>\n        </Flex>\n      ))}\n      <Block padding=\"1rem\">\n        <ArticleForm\n          onSelect={name =>\n            updateEntries({\n              name,\n              amount: \"1\",\n              inBasket: false\n            })\n          }\n        />\n      </Block>\n\n      <Block padding=\"1rem\">\n        <PrimaryButton onClick={clear}>Clear</PrimaryButton>\n      </Block>\n    </div>\n  );\n};\n","/** @jsx jsx */\n\nimport { ArticleList } from \"./article/article-list\";\nimport { Component } from \"react\";\n\nimport {\n  ThemeProvider,\n  light,\n  dark,\n  HeaderNavBar,\n  ThemeSwitcher,\n  Block,\n  Global,\n  css,\n  jsx\n} from \"bricks-of-sand\";\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeProvider themes={{ light, dark }}>\n        <Global\n          styles={css`\n            html {\n              font-size: 18px;\n              font-family: sans-serif;\n            }\n\n            label {\n              display: block;\n            }\n\n            @media only screen and (min-width: 30em) {\n              html {\n                font-size: 24px;\n              }\n            }\n            h1,\n            h2,\n            h3 {\n              text-transform: uppercase;\n              font-weight: lighter;\n            }\n          `}\n        />\n        <HeaderNavBar>\n          <Block margin=\"1rem\">\n            <ThemeSwitcher />\n          </Block>\n          <Block margin=\"1rem\">\n            <h2>Einkaufsliste</h2>\n          </Block>\n        </HeaderNavBar>\n        <ArticleList />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}