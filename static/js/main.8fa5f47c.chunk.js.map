{"version":3,"sources":["article/article-state.ts","article/article-form.tsx","article/article-list.tsx","App.js","serviceWorker.js","index.tsx"],"names":["useLocalStorage","key","initialValue","_useState","useState","window","localStorage","getItem","JSON","parse","error","_useState2","Object","slicedToArray","item","setInnerValue","value","setItem","stringify","ArticleForm","props","_useArticleStore","_useLocalStorage3","_useLocalStorage4","articleMap","updateMap","articles","keys","map","sort","a","b","popularity","updateArticles","name","article","nextArticle","objectSpread","defineProperty","useArticleStore","react","downshift_esm","onChange","selection","onSelect","itemToString","_ref","clearSelection","getInputProps","getItemProps","getMenuProps","isOpen","inputValue","highlightedIndex","selectedItem","index_es","assign","style","marginRight","placeholder","onClick","children","filter","toLowerCase","includes","index","isHovered","isSelected","ArticleList","_useArticleEntries","_useLocalStorage","_useLocalStorage2","updateEntries","entry","entries","inBasket","updateAmount","amount","toggleEntry","clear","useArticleEntries","toBasket","padding","alignContent","justifyContent","e","target","length","margin","article_form_ArticleForm","App","themes","light","dark","styles","css","_templateObject","article_list_ArticleList","Component","Boolean","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fa5f47c.chunk.js","sourcesContent":["import { ArticleMap } from './article-state';\nimport { useState } from 'react';\n\nexport interface Article {\n  name: string;\n  popularity: number;\n}\n\nexport interface ArticleMap {\n  [key: string]: Article;\n}\n\nexport interface ArticleEntry {\n  name: string;\n  amount?: string;\n  inBasket?: boolean;\n}\n\nexport interface ArticleEntryMap {\n  [key: string]: ArticleEntry;\n}\n\nexport function useArticleEntries() {\n  const [map, updateMap] = useLocalStorage<ArticleEntryMap>(\n    'articleEntries',\n    {}\n  );\n\n  const updateEntries = (entry: ArticleEntry) => {\n    updateMap({ ...map, [entry.name]: { ...entry } });\n  };\n\n  const clear = () => {\n    updateMap({});\n  };\n\n  const toggleEntry = (entry: ArticleEntry) => {\n    updateEntries({\n      ...entry,\n      inBasket: !entry.inBasket,\n    });\n  };\n\n  const updateAmount = (entry: ArticleEntry, amount: string) => {\n    updateEntries({\n      ...entry,\n      amount,\n    });\n  };\n\n  const entries = Object.keys(map)\n    .map(key => map[key])\n    .sort((a, b) => (a.inBasket === b.inBasket ? 0 : a.inBasket ? 1 : -1));\n\n  return { updateEntries, updateAmount, toggleEntry, entries, clear };\n}\n\nexport function useArticleStore() {\n  const [articleMap, updateMap] = useLocalStorage<ArticleMap>('articles', {});\n\n  const updateArticles = (name: string) => {\n    const article = articleMap[name];\n    const nextArticle = article\n      ? { name: article.name, popularity: article.popularity + 1 }\n      : { name, popularity: 0 };\n\n    updateMap({ ...articleMap, [name]: nextArticle });\n  };\n\n  const articles = Object.keys(articleMap)\n    .map(key => articleMap[key])\n    .sort((a, b) => b.popularity - a.popularity);\n\n  return { articles, updateArticles };\n}\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (map: T) => void] {\n  const [item, setInnerValue] = useState(() => {\n    try {\n      return window.localStorage.getItem(key)\n        ? JSON.parse(window.localStorage.getItem(key) || '')\n        : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: any) => {\n    setInnerValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [item, setValue];\n}\n","import * as React from 'react';\nimport Downshift from 'downshift';\nimport {\n  Relative,\n  Input,\n  DropDownCard,\n  DropDownCardItem,\n  AcceptButton,\n  Flex,\n} from 'bricks-of-sand';\n\nimport { useArticleStore } from './article-state';\n\nexport const ArticleForm = (props: { onSelect: (article: string) => void }) => {\n  const { articles, updateArticles } = useArticleStore();\n\n  return (\n    <Downshift\n      onChange={selection => {\n        updateArticles(selection.name);\n        props.onSelect(selection.name);\n      }}\n      itemToString={() => ''}>\n      {({\n        clearSelection,\n        getInputProps,\n        getItemProps,\n        getMenuProps,\n        isOpen,\n        inputValue,\n        highlightedIndex,\n        selectedItem,\n      }) => (\n        <div>\n          <Relative>\n            <Flex>\n              <Input\n                style={{ marginRight: '1rem' }}\n                placeholder=\"Artikel\"\n                {...getInputProps()}\n              />\n              <AcceptButton\n                onClick={() => {\n                  if (inputValue) {\n                    updateArticles(inputValue);\n                    props.onSelect(inputValue);\n                    clearSelection();\n                  }\n                }}\n              />\n            </Flex>\n            {isOpen && (\n              <DropDownCard\n                {...getMenuProps()}\n                children={articles\n                  .filter(\n                    (item: any) =>\n                      !inputValue ||\n                      item.name.toLowerCase().includes(inputValue.toLowerCase())\n                  )\n                  .map((item: any, index: number) => (\n                    <DropDownCardItem\n                      isHovered={highlightedIndex === index}\n                      isSelected={selectedItem === item}\n                      {...getItemProps({ item, index })}\n                      key={item.name}>\n                      {item.name}\n                    </DropDownCardItem>\n                  ))}\n              />\n            )}\n          </Relative>\n        </div>\n      )}\n    </Downshift>\n  );\n};\n","import * as React from 'react';\n\nimport { useArticleEntries, ArticleEntry } from './article-state';\nimport { ArticleForm } from './article-form';\nimport { Flex, Input, Separator, Block, PrimaryButton } from 'bricks-of-sand';\n\nexport const ArticleList = () => {\n  const {\n    entries,\n    updateEntries,\n    updateAmount,\n    toggleEntry,\n    clear,\n  } = useArticleEntries();\n\n  const toBasket = entries.filter(entry => !entry.inBasket);\n  const inBasket = entries.filter(entry => entry.inBasket);\n\n  return (\n    <div>\n      {toBasket.map(entry => (\n        <Flex\n          padding=\"0.5rem 1rem\"\n          key={entry.name}\n          alignContent=\"center\"\n          justifyContent=\"space-between\">\n          <div>\n            <Input\n              value={entry.amount}\n              onChange={e => updateAmount(entry, e.target.value)}\n            />\n          </div>\n          <div onClick={() => toggleEntry(entry)}>{entry.name}</div>\n        </Flex>\n      ))}\n      {toBasket.length !== 0 && <Separator margin=\"0.5rem\" />}\n      {inBasket.map(entry => (\n        <Flex\n          padding=\"0.5rem 1rem\"\n          key={entry.name}\n          onClick={() => toggleEntry(entry)}\n          justifyContent=\"space-between\">\n          <div>{entry.amount}</div>\n          <div>{entry.name}</div>\n        </Flex>\n      ))}\n      <Block padding=\"1rem\">\n        <ArticleForm\n          onSelect={name =>\n            updateEntries({\n              name,\n              amount: '1',\n              inBasket: false,\n            })\n          }\n        />\n      </Block>\n\n      <Block padding=\"1rem\">\n        <PrimaryButton onClick={clear}>Clear</PrimaryButton>\n      </Block>\n    </div>\n  );\n};\n","/** @jsx jsx */\n\nimport { ArticleList } from './article/article-list';\nimport { Component } from 'react';\nimport {\n  ThemeProvider,\n  light,\n  dark,\n  HeaderNavBar,\n  ThemeSwitcher,\n  Block,\n  Global,\n  css,\n  jsx,\n} from 'bricks-of-sand';\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeProvider themes={{ light, dark }}>\n        <Global\n          styles={css`\n            html {\n              font-size: 18px;\n              font-family: sans-serif;\n            }\n\n            label {\n              display: block;\n            }\n\n            @media only screen and (min-width: 30em) {\n              html {\n                font-size: 24px;\n              }\n            }\n            h1,\n            h2,\n            h3 {\n              text-transform: uppercase;\n              font-weight: lighter;\n            }\n          `}\n        />\n        <HeaderNavBar>\n          <Block margin=\"1rem\">\n            <ThemeSwitcher />\n          </Block>\n          <Block margin=\"1rem\">\n            <h2>Einkaufsliste</h2>\n          </Block>\n        </HeaderNavBar>\n        <ArticleList />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}